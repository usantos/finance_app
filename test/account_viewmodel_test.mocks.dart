// Mocks generated by Mockito 5.4.6 from annotations
// in financial_app/test/account_viewmodel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'package:financial_app/domain/entities/account.dart' as _i5;
import 'package:financial_app/domain/repositories/account_repository.dart' as _i2;
import 'package:financial_app/domain/usecases/get_account.dart' as _i3;
import 'package:financial_app/domain/usecases/transfer_balance.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountRepository_0 extends _i1.SmartFake implements _i2.AccountRepository {
  _FakeAccountRepository_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [GetAccount].
class MockGetAccount extends _i1.Mock implements _i3.GetAccount {
  MockGetAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountRepository get repository =>
      (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAccountRepository_0(this, Invocation.getter(#repository)),
      ) as _i2.AccountRepository);

  @override
  _i4.Future<_i5.Account?> call(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(#call, [userId]),
        returnValue: _i4.Future<_i5.Account?>.value(),
      ) as _i4.Future<_i5.Account?>);
}

/// A class which mocks [TransferBalance].
class MockTransferBalance extends _i1.Mock implements _i6.TransferBalance {
  MockTransferBalance() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountRepository get repository =>
      (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAccountRepository_0(this, Invocation.getter(#repository)),
      ) as _i2.AccountRepository);

  @override
  _i4.Future<Map<String, dynamic>> call(String? toAccountNumber, double? amount) =>
      (super.noSuchMethod(
        Invocation.method(#call, [toAccountNumber, amount]),
        returnValue: _i4.Future<Map<String, dynamic>>.value({'success': true, 'message': ''}),
        returnValueForMissingStub: _i4.Future<Map<String, dynamic>>.value({'success': true, 'message': ''}),
      ) as _i4.Future<Map<String, dynamic>>);
}

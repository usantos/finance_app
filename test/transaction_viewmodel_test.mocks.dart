// Mocks generated by Mockito 5.4.6 from annotations
// in financial_app/test/transaction_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i14;

import 'package:financial_app/data/datasources/account_local_data_source.dart'
    as _i3;
import 'package:financial_app/data/datasources/user_local_data_source.dart'
    as _i4;
import 'package:financial_app/data/models/user_response.dart' as _i13;
import 'package:financial_app/domain/entities/account.dart' as _i10;
import 'package:financial_app/domain/entities/transaction.dart' as _i8;
import 'package:financial_app/domain/repositories/account_repository.dart'
    as _i2;
import 'package:financial_app/domain/repositories/transaction_repository.dart'
    as _i5;
import 'package:financial_app/domain/usecases/account_usecase.dart' as _i9;
import 'package:financial_app/domain/usecases/transfer_usecase.dart' as _i6;
import 'package:financial_app/presentation/viewmodels/account_viewmodel.dart'
    as _i11;
import 'package:financial_app/presentation/viewmodels/transaction_viewmodel.dart'
    as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAccountRepository_0 extends _i1.SmartFake
    implements _i2.AccountRepository {
  _FakeAccountRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccountLocalDataSource_1 extends _i1.SmartFake
    implements _i3.AccountLocalDataSource {
  _FakeAccountLocalDataSource_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserLocalDataSource_2 extends _i1.SmartFake
    implements _i4.UserLocalDataSource {
  _FakeUserLocalDataSource_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransactionRepository_3 extends _i1.SmartFake
    implements _i5.TransactionRepository {
  _FakeTransactionRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferUseCase extends _i1.Mock implements _i6.TransferUseCase {
  MockTransferUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountRepository get accountRepository =>
      (super.noSuchMethod(
            Invocation.getter(#accountRepository),
            returnValue: _FakeAccountRepository_0(
              this,
              Invocation.getter(#accountRepository),
            ),
          )
          as _i2.AccountRepository);

  @override
  _i3.AccountLocalDataSource get accountLocalDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#accountLocalDataSource),
            returnValue: _FakeAccountLocalDataSource_1(
              this,
              Invocation.getter(#accountLocalDataSource),
            ),
          )
          as _i3.AccountLocalDataSource);

  @override
  _i4.UserLocalDataSource get userLocalDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#userLocalDataSource),
            returnValue: _FakeUserLocalDataSource_2(
              this,
              Invocation.getter(#userLocalDataSource),
            ),
          )
          as _i4.UserLocalDataSource);

  @override
  _i5.TransactionRepository get transactionRepository =>
      (super.noSuchMethod(
            Invocation.getter(#transactionRepository),
            returnValue: _FakeTransactionRepository_3(
              this,
              Invocation.getter(#transactionRepository),
            ),
          )
          as _i5.TransactionRepository);

  @override
  _i7.Future<Map<String, dynamic>> call(
    String? toAccountNumber,
    double? amount,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [toAccountNumber, amount, password]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> verifyTransferPassword() =>
      (super.noSuchMethod(
            Invocation.method(#verifyTransferPassword, []),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> setTransferPassword(
    String? transferPassword,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setTransferPassword, [transferPassword]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> changeTransferPassword(
    String? oldTransferPassword,
    String? newTransferPassword,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeTransferPassword, [
              oldTransferPassword,
              newTransferPassword,
            ]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<void> addTransaction(_i8.Transaction? transaction) =>
      (super.noSuchMethod(
            Invocation.method(#addTransaction, [transaction]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i8.Transaction>> getTransactions(String? accountId) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactions, [accountId]),
            returnValue: _i7.Future<List<_i8.Transaction>>.value(
              <_i8.Transaction>[],
            ),
          )
          as _i7.Future<List<_i8.Transaction>>);
}

/// A class which mocks [AccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountUseCase extends _i1.Mock implements _i9.AccountUseCase {
  MockAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAccountRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AccountRepository);

  @override
  _i4.UserLocalDataSource get userLocalDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#userLocalDataSource),
            returnValue: _FakeUserLocalDataSource_2(
              this,
              Invocation.getter(#userLocalDataSource),
            ),
          )
          as _i4.UserLocalDataSource);

  @override
  _i3.AccountLocalDataSource get accountLocalDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#accountLocalDataSource),
            returnValue: _FakeAccountLocalDataSource_1(
              this,
              Invocation.getter(#accountLocalDataSource),
            ),
          )
          as _i3.AccountLocalDataSource);

  @override
  _i7.Future<_i10.Account?> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i7.Future<_i10.Account?>.value(),
          )
          as _i7.Future<_i10.Account?>);

  @override
  _i7.Future<_i10.Account?> getAccountLocal() =>
      (super.noSuchMethod(
            Invocation.method(#getAccountLocal, []),
            returnValue: _i7.Future<_i10.Account?>.value(),
          )
          as _i7.Future<_i10.Account?>);
}

/// A class which mocks [AccountViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountViewModel extends _i1.Mock implements _i11.AccountViewModel {
  MockAccountViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isHidden =>
      (super.noSuchMethod(Invocation.getter(#isHidden), returnValue: false)
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  List<String> get nomes =>
      (super.noSuchMethod(Invocation.getter(#nomes), returnValue: <String>[])
          as List<String>);

  @override
  List<String> get iconAssets =>
      (super.noSuchMethod(
            Invocation.getter(#iconAssets),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String get displayBalance =>
      (super.noSuchMethod(
            Invocation.getter(#displayBalance),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.getter(#displayBalance),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setAccount(_i10.Account? account) => super.noSuchMethod(
    Invocation.method(#setAccount, [account]),
    returnValueForMissingStub: null,
  );

  @override
  void updateAccount(_i10.Account? account) => super.noSuchMethod(
    Invocation.method(#updateAccount, [account]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleVisibility() => super.noSuchMethod(
    Invocation.method(#toggleVisibility, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<_i13.UserResponse?> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue: _i7.Future<_i13.UserResponse?>.value(),
          )
          as _i7.Future<_i13.UserResponse?>);

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TransactionViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionViewModel extends _i1.Mock
    implements _i15.TransactionViewModel {
  MockTransactionViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get showErrors =>
      (super.noSuchMethod(Invocation.getter(#showErrors), returnValue: false)
          as bool);

  @override
  List<_i8.Transaction> get transactions =>
      (super.noSuchMethod(
            Invocation.getter(#transactions),
            returnValue: <_i8.Transaction>[],
          )
          as List<_i8.Transaction>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasPassword =>
      (super.noSuchMethod(Invocation.getter(#hasPassword), returnValue: false)
          as bool);

  @override
  set showErrors(bool? value) => super.noSuchMethod(
    Invocation.setter(#showErrors, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setAccount(_i10.Account? account) => super.noSuchMethod(
    Invocation.method(#setAccount, [account]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> fetchTransactions(String? accountId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchTransactions, [accountId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> addTransaction(_i8.Transaction? transaction) =>
      (super.noSuchMethod(
            Invocation.method(#addTransaction, [transaction]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> transferBetweenAccounts(
    String? accountId,
    double? amount,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transferBetweenAccounts, [
              accountId,
              amount,
              password,
            ]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> refreshAccountBalance() =>
      (super.noSuchMethod(
            Invocation.method(#refreshAccountBalance, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> verifyTransferPassword() =>
      (super.noSuchMethod(
            Invocation.method(#verifyTransferPassword, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> setTransferPassword(String? transferPassword) =>
      (super.noSuchMethod(
            Invocation.method(#setTransferPassword, [transferPassword]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> changeTransferPassword(
    String? oldTransferPassword,
    String? newTransferPassword,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeTransferPassword, [
              oldTransferPassword,
              newTransferPassword,
            ]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  void addListener(_i14.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i14.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
